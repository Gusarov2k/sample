
#1
rvm use 2.5.1@aqua --create // create gemset this version ruby
rvm --ruby-version use 2.5.1@HartlM // create file in progect dir
gem list // list install gems
gem update --system // update system gem

!!! для того что бы не устанавливать документацию на gem нужно:
1. создать фаил в домашней деректории nano ~/.gemrc
2. add code gem: --no-document 
3. save file


#2
Другими словами, запись >= всегда устанавливает самый последний гем, тогда
как ~> 4.0.0 установит только незначительное обновление (например, с 4.0.0 до
4.0.1 ), но не позволит установить значительное обновление (например, с 4.0 до
4.1 ).

#3
//maps controllers
bundle exec rake routes  

#4
// start rails console
rails console

#command
rails generate scaffold User name:string email:string
bundle exec rake db:migrate

#
В традициях Unix утилита make играет важную роль в сборке выполняемых программ
из исходного кода; у многих хакеров на уровне мышечной памяти зафиксирована
строка
$ ./configure && make && sudo make install
обычно используемая для компиляции кода в Unix-системах (включая Linux и Mac
OS X).
Rake – это Ruby make, make-подобный язык, написанный на Ruby. Rails очень широ-
ко использует Rake, особенно для решения бесчисленных мелких административ-
ных задач, возникающих при разработке веб-приложений, опирающихся на базы
данных. Наиболее распространенной, пожалуй, является команда rake db:migrate ,
но есть и другие; полный список задач, связанных с базами данных, можно уви-
деть, передав параметр -T db :
$ bundle exec rake -T db
Чтобы увидеть все доступные задачи Rake, запустите
$ bundle exec rake -T

#for deploy on Heroky 
нужно в файле secret.yml в production: заменить ключ взяв его с настройки хостинга herocu
так же нужно добавить в гем файл во втрой строке версию Ruby - ruby: ruby "2.5.1"

bundle install --without production // Стоит отметить, что --without production является «запоминаемым параметром», то есть он включится автоматически при следующем запуске bundle install .

#
ROLLBACK В Rails это может быть
осуществлено с помощью rails destroy с именем созданного элемента. В частно-
сти, следующие две команды отменяют друг друга:
$ rails generate controller StaticPages home help
$ rails destroy controller StaticPages home help

Аналогично в главе 6 мы создадим модель командой:
$ rails generate model User name:string email:string
Это действие может быть отменено с помощью:
$ rails destroy model User

Миграции изменяют состояние базы данных с помощью команды
$ bundle exec rake db:migrate
Мы можем откатить один шаг миграции:
$ bundle exec rake db:rollback
Чтобы откатить к самому началу (все миграции):
$ bundle exec rake db:migrate VERSION=0
Как вы могли догадаться, подстановка любого другого числа вместо 0 откатит миг­
рации до соответствующей версии, где номера версий образуются из последова-
тельного списка миграций.


************************************
Unix-процессы
В Unix-подобных системах, таких как Linux и OS X, каждая пользовательская и си-
стемная задача находится в четко определенном контейнере, который называется
процессом. Чтобы увидеть все процессы в системе, можно воспользоваться ко-
мандой ps с параметром aux :
$ ps aux
Чтобы отфильтровать процессы по типам, можно пропустить результаты работы
команды ps через инструмент поиска по шаблону grep , использовав оператор кон-
вейера | :
$ ps aux | grep spring
ubuntu 12241 0.3 0.5 589960 178416 ? Ssl Sep20 1:46
spring app | sample_app | started 7 hours ago
В этом выводе можно заметить множество деталей, самой важной из которых яв-
ляется идентификатор (id) процесса, или pid . Остановить ненужный процесс можно командой kill , передав с ее помощью сигнал завершения (с кодом 9 1 ) процессу
по его идентификатору pid :
$ kill -9 12241
Я рекомендую этот прием для остановки отдельных процессов, таких как Rails-
сервер (идентификатор pid , которого можно получить командой ps aux | grep server ),
но иногда бывает удобнее останавливать сразу все процессы, соответствующие
определенному имени программы, например все процессы spring , захламляющие
систему. В этом случае стоит сначала попробовать остановить их с помощью са-
мой команды spring :
$ spring stop
Иногда этот прием не срабатывает, тогда можно остановить все процессы с име-
нем spring , вызвав команду pkill :
$ pkill -9 -f spring
Каждый раз, когда процесс ведет себя не так, как ожидается, или кажется завис-
шим, запустите сначала ps aux , чтобы увидеть, что происходит, и только потом kill
-9<pid> или pkill -9 -f <имя> .
******************************************